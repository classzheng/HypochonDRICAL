/*******************************************************
 * @project:   HypochonDRICAL                          *
 * @author:    classzheng: github.com                  *
 * @brief:     A REAL-LIFE SANDBOX SIMULATE            *
 * @date:      2025/1/06                               *
 * @basemodel: SCP-079 OldAI                           *
 * @releaseud: MIT License Y                         *
 *******************************************************/


/* Include Header files- *//////////////////////////////
#include <Iostream.H>                                 //
#include <Graphics.H>                                 //
#include <Conio.H>                                    //
#include <Math.H>                                     //
#include <Dos.H>                                      //
#include <Time.H>                                     //
#include <Alloc.H>                                    //
#include <Limits.H>                                   //
#include <Stdio.H>                                    //
#include <Stdlib.H>                                   //
#include <String.H>                                   //
#include <Stdarg.H>                                   //
#define CNT_WHILE(N) int TEMP##N = N; while(TEMP##N--)//

const char* acafile="@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                      \
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                       \
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                        \
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                         \
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                          \
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                           \
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_@@@@@@@@@@@@@@@@                            \
@@@@@@@@@@@@@@                                                                                                      \
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                              \
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                               \
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                \
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                 \
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_@@_@_+@@@@@_@___                                  \
_@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@__@@@@@@@@@@@@@                                   \
@@@@@__@___@@_________@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_@@@@@@@@                                    \
@@@@@@@@@@@@@@@@@@@@@@@@@_@__+@@+_________@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                     \
@@@@@@@@@@@@@@@@_@@@@@@@@@@@@@@@@@@@@@@@@@@__@@___@+___________+@@@@@@@@@@@@@@@@@@@@@@@                                      \
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_@@@@@@@@@@___@_______@@@@@@@@@@@@@_+@________________+@@@                                       \
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_@@@@@@@@@@@@@@@@@@@_______________@@@@@@@@@@@@@@                                        \
_________________@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+@@@@@@@@@__________                                         \
_______@@@@@@@@@@@_@_________________@+@@+@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                          \
@@@@@@@@@@____                                                                                                                    \
_____________+@@@@@@@@@@@__________________@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                            \
@@@@@@@@@@@@@@@@________________@+@@@@@@@@@@@_@_________________@@@@@@@@@@@@@@@@@@@@@@@                                             \
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_______________@_@@@@@@@@@@@@@_________@@@@@____@@@                                              \
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_____________@_@@@@@@                                                        \
@@@@@@@@__________@@@______+@@@@@@@_@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@___                                            \
____@@@@@@@@@@@@@@@@@@@@@@+_______@_@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                               \
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_____________+@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                \
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+____________@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_____\
________@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+____________@@_@@@@@@@@@@@@@@@@@            \
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@__@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                                                \
@@@@@@@+_____________@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_@@@@_@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+                                   \
@________________@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_@@@@@@@@@                                                                     \
@@@@@@@@@@@@@@@________@@_________________@+@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                      \
@_@@@@@+@@@@@@@@@@@_@@@@@@@__________________________+@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+@@@@@@@@@@                            \
@@@@@@@@@@@@@@@@+_______________________++@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_@@@@@@@@@@@@@__                                             \
__@@@@@@@@@@@@@@@@@@@@@@+____________+++@@@@@@@@@@@@@+@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@_@@@@_________@@@@@@@@@@@@@@______________+_@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\
@@@@@@@@@@@@@@@@@@@_________________________________@___@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                                                  \
@@@@@@_@@@@@@@@________________@___________@_@@_@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                                                             \
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@______@@__@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                                                                          \
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                                                           \
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@__@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                                                                          \
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                                                                     \
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                                                                                                \
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@";

const char*treemonster="_______________________________________________________@@@@______________________________@@@++++++@@@________________________@@++++++++++++@@___________\
__________@@+++++++++++++++@____________________@++++++++++++++++@@___________________@++++++++++++++++@@___________________@@+++++++++++++++@__________                        \
___________@@++++++++++++@@_______________________@@@+++++++++@@________________________@@+@@@@@@@@+@@_______________________@@++++++++++++@@___________                        \
_________@@++++++++++++++++@@_________________@@@@@@++++++++++@@@@@@_____________________@++++++++++@__________________________@++++++++++@_____________                        \
_____________@++++++++++@__________________________@++++++++++@__________________________@++++++++++@__________________________@++++++++++@_____________                        \
_____________@++++++++++@__________________________@++++++++++@__________________________@++++++++++@__________________________@++++++++++@_____________                        \
_____________@++++++++++@__________________________@++++++++++@__________________________@++++++++++@__________________________@@@@@@@@@@@@_____________                        \
_____________@@@@@@@@@@@@_______________________________________________________________________________________________________________________________";


struct { const char*qt; unsigned dly, tsk; } quotes[]={
	{"Welcome to control the camera! [ESC] to skip.", 100, 0},
	{"The camera-neck was locked >~<",100, 0},
	{"But we have many cameeeeeeras! -W-",10, 0},
	{"So, where are we now?",120, 0},
	{"THIS Is the `Forest', you can develop it.",100, 0},
	{"Develop it, and make it real.",100, 0},
	{"Press any key to flush the forest.",100, 1},
//	{"",100, 0},
};



class plant {
 private:
	// Nothing..
 public:
	short x, y, z;
	plant()  {};
	~plant() {};
	void move2xyz(short X, short Y, short Z) { x=X, y=Y, z=Z; }
	void render(void);
	/*****************
		 ^ z
		 |#####       <-- Monitor
		 |#####_, x
			\     `
				\.  y
	 *****************/
};

class forest {
 private:
	plant* objects;
 public:
	short using_camera;
	forest(short camera): using_camera(camera)  {}
	~forest()                                   {}
	void render();
};


void minitnow(void) {
	union REGS reg;
	reg.x.ax=0;
	int86(0x33,&reg,&reg);
	reg.x.ax=1;
	int86(0x33,&reg,&reg);
	return ;
}

void mshownow(void) {
	union REGS reg;
	reg.x.ax=1;
	int86(0x33,&reg,&reg);
	return ;
}

void mhidenow(void) {
	union REGS reg;
	reg.x.ax=2;
	int86(0x33,&reg,&reg);
	return ;
}

void getmxy(int* x,int* y) {
	union REGS reg;
	reg.x.ax=3;
	int86(0x33,&reg,&reg);
	*x=reg.x.cx,*y=reg.x.dx;
	return ;
}

void simularender(unsigned short x, unsigned short y, enum COLORS* panel) {
	if(getmaxx()!=639 && getmaxy()!=479) {
		puts("Unknown bgi Screen-size.");
		return ;
	}
	setfillstyle(1, panel[3]),bar(19+x,19+y,21+107*0.7+x,59+y);
	unsigned idx,jdx,strseek=0;
	for(idx=0u; idx<39; idx++) {
		for(jdx=0u; jdx<107; jdx++) {
			unsigned char c,clr=WHITE;
			while(1) {
				c=(acafile)[strseek++];
				if(c^32) break;
			}
			if(c=='@') clr=(panel[0]);
			if(c=='_') clr=(panel[1]);
			if(c=='+') clr=(panel[2]);
			setfillstyle(1,clr);
			putpixel(20+0.7*jdx+x,20+idx+y, clr);
		}
	}
	return ;
}

void flush_dialogue(void) {
	setfillstyle(2,DARKGRAY);
	bar(85,50,505,100);
	setcolor(WHITE);
	outtextxy(85,40,"Simula ");
	outtextxy(135,40,"[-/-]");
	setcolor(LIGHTGRAY);
	outtextxy(175,40,"[Global Dialogue] {\n MOUSEPOINT}");
	bar(85,50,505,100);
	return ;
}

void goahead(const char*context, unsigned dly, char task) {
	char temp[2]="X";
	unsigned idx=0, cur=0;
	setcolor(LIGHTGRAY);
	for(idx=0; idx<strlen(context); idx++) {
		temp[0]=context[idx];
		outtextxy(87+cur,50,temp);
		delay(dly);
		cur+=textwidth("-");
	}
	if(task) return ;
	setcolor(WHITE);
	outtextxy(503-textwidth("-----"),90,"SKIP");
	return ;
}
void forest::render(void) {
	switch (using_camera) {
	 case 0:
		setcolor(MAGENTA);
 //		outtextxy(503-textwidth("------|"),40,"CAMERA0");

		setcolor(LIGHTCYAN);
		line(0,240,639,240); // Dead-line
		setfillstyle(1, LIGHTCYAN);
		bar(0,0,639,240);
		setfillstyle(1, CYAN);
		bar(0,241,639,479); // Display background

		break;
	 case 1:
		setcolor(MAGENTA);
 //		outtextxy(503-textwidth("------|"),40,"CAMERA1");
		break;
	 default:
		using_camera=(0);
		setcolor(RED);
		outtextxy(503-textwidth("------|"),40,"RESETED");
		break;
	};
	return ;
}

void move_towards(short*x, short*y, int step, float angle) {
	*x+=step*cos(angle);
	*y+=step*sin(angle);
	return ;
}

void plantrender(float x, float y, float scale) {
	unsigned idx,jdx,strseek=0;
	signed epsx=scale*x-x, epsy=scale*y-y;
	for(idx=0u; idx<32; idx++) {
		for(jdx=0u; jdx<38; jdx++) {
			unsigned char c,clr=WHITE;
			while(1) {
				c=(treemonster)[strseek++];
				if(c^32) break;
			}
			if(c=='@') clr=BLACK;
			if(c=='_') continue;
			if(c=='+') clr=WHITE;
			setfillstyle(1,clr);
			setcolor(clr);
//	 		putpixel((jdx+x)*scale-(epsx),(idx*2+y)*scale-epsy, clr);
			circle((jdx+x)*scale-(epsx)-2*scale*0.01f,(idx*2+y)*scale-epsy-2*scale*0.01f,2*scale*0.01f);
		}
	}
	return ;
}
void plant::render (void) {
	if(z==0) return ; // Infinite proximity to the display plane.
	if(z< 0) {
		setcolor(MAGENTA);
		outtextxy(638-textwidth("SOMETHING BEHIND YOU.."),0+textheight("H"),"SOMETHING BEHIND YOU..");
		return ;
	}

	//printf("%d, %d, %d | %f, %f, %f",x,y,z, x*3.5f/z, y*3.5f/z, 3.5f/z);
	char buffer[280]="";
	plantrender(1.f*(x+0)*(3.5f/*3D CONST-VALUE*/)/z+320, 1.f*(y+0)*(3.5f/*3D CONST-VALUE*/)/z+240, 3.5/z);
	setcolor(BLUE);
	sprintf(buffer,"%d,%d,%d",x,y,z);
	outtextxy(1.f*(x+0)*(3.5f/*3D CONST-VALUE*/)/z+320, 1.f*(y+0)*(3.5f/*3D CONST-VALUE*/)/z+240, buffer);
	return ;
}